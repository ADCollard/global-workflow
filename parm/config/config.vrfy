#!/bin/ksh -x

########## config.vrfy ##########
# Verification step specific

echo "BEGIN: config.vrfy"

# Get task specific resources
. $EXPDIR/config.resources vrfy

export VDUMP="gfs"                # Verifying dump
export CDUMPFCST="gdas"           # Fit-to-obs with GDAS/GFS prepbufr
export CDFNL="gdas"               # Scores verification against GDAS/GFS analysis

export MKPGB4PRCP="YES"           # Make 0.25-deg pgb files in ARCDIR for precip verification
export VRFYFITS="YES"             # Fit to observations
export VRFY_PKCG2RUN="BOTH"       # "VSDB" = run VSDB verification package only, "METPLUS" = run METplus verification package only, "BOTH = run both verification packages
export VSDB_STEP1="YES"           # Populate VSDB database
export VSDB_STEP2="NO"
export VRFYG2OBS="YES"            # Grid to observations, see note below if turning ON
export VRFYPRCP="YES"             # Precip threat scores
export VRFYRAD="YES"              # Radiance data assimilation monitoring
export VRFYOZN="YES"              # Ozone data assimilation monitoring
export VRFYMINMON="YES"           # GSI minimization monitoring
export VRFYTRAK="YES"              # Hurricane track verification
export VRFYGENESIS="YES"           # Cyclone genesis verification
export RUNMOS="NO"                # whether to run entire MOS package
export VRFY_STEP1="YES"           # Run METplus verification step 1: partial sum and/or contingency table counts
export VRFY_STEP2="NO"            # Run METplus verification step 2: make plots
export VRFY_GRID2GRID="YES"       # Run METplus desired steps for grid-to-grid verification
export VRFY_GRID2OBS="YES"        # Run METplus desired steps for grid-to-obs verification
export VRFY_PRECIP="YES"          # Run METplus desired steps for precipitation verification

#-------------------------------------------------
# Fit to Observations
#-------------------------------------------------

if [ $VRFYFITS = "YES" ]; then

    export PRVT=$HOMEgfs/fix/fix_gsi/prepobs_errtable.global
    export HYBLEVS=$HOMEgfs/fix/fix_am/global_hyblev.l65.txt
    export CUE2RUN=$QUEUE

    if [ $machine = "WCOSS_C" ]; then
        export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
        export PREPQFITSH="$fitdir/subfits_cray_nems"
    elif [ $machine = "WCOSS_DELL_P3" ]; then
        export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
        export PREPQFITSH="$fitdir/subfits_dell_nems"
    elif [ $machine = "THEIA" ]; then
        export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
        export PREPQFITSH="$fitdir/subfits_theia_nems"
    fi

fi


#----------------------------------------------------------
# VSDB STEP1, Verify Precipipation and Grid To Obs options
#----------------------------------------------------------
# All these call $VSDBSH

if [ "$CDUMP" = "gfs" ] ; then
    ddd=`echo $CDATE |cut -c 1-8`
    #if [ $ddd -eq 5 -o $ddd -eq 10 ]; then export VSDB_STEP2 = "YES" ;fi

    if [ $VRFY_PKCG2RUN = "VSDB" -o $VRFY_PKCG2RUN = "BOTH" ]; then
        if [ $VSDB_STEP1 = "YES" -o $VSDB_STEP2 = "YES" -o $VRFYPRCP = "YES" -o $VRFYG2OBS = "YES" ]; then
            export BACKDATEVSDB=24                          # execute vsdbjob for the previous day
            export VBACKUP_PRCP=24                          # back up for QPF verification data
            export vsdbsave="$NOSCRUB/archive/vsdb_data"    # place to save vsdb database
            export vsdbhome=$BASE_VERIF                     # location of global verification scripts
            export VSDBSH="$vsdbhome/vsdbjob.sh"            # VSDB job script
            export vlength=$FHMAX_GFS                       # verification length
            export vhr_rain=$FHMAX_GFS                      # verification length for precip
            export ftyplist="pgbq"                          # verif. files used for computing QPF ETS scores
            export ptyplist="PRATE"                         # precip types in GRIB: PRATE or APCP
            export anltype="gfs"                            # default=gfs, analysis type (gfs or gdas) for verification
            export rain_bucket=6                            # prate in pgb files is 6-hr accumulated

            export VSDB_START_DATE="$SDATE"                 # starting date for vsdb maps
            export webhost="emcrzdm.ncep.noaa.gov"          # webhost(rzdm) computer
            export webhostid="$USER"                        # webhost(rzdm) user name
            export SEND2WEB="NO"                            # whether or not to send maps to webhost
            export WEBDIR="/home/people/emc/www/htdocs/gmb/${webhostid}/vsdb/$PSLOT"
            export mdlist="gfs $PSLOT "                     # exps (up to 10) to compare in maps
        fi
    fi
fi


#----------------------------------------------------------
# METplus, Verify grid-to-grid, and/or grid-to-obs, and/or precipitation options
#----------------------------------------------------------
# All these call $METPLUSSH

if [ "$CDUMP" = "gfs" ] ; then
    if [ $VRFY_STEP1 = "YES" -o $VRFY_STEP2 = "YES" ]; then
        if [ $VRFY_PKCG2RUN = "METPLUS" -o $VRFY_PKCG2RUN = "BOTH" ]; then
            export VRFYBACK_HRS=24                                          # execute step 1 metplusjob for the previous x hours
            export VRFYBACK_HRS_PRECIP=24                                   # additonal back up time for QPF verification data to allow observation data to come in
            export metplussave="$NOSCRUB/archive/metplus_data"              # place to save METplus database
            export metplushome=$BASE_VERIF_METPLUS                          # location of global verification scripts
            export metplusconfig="$PARMgfs/verif"                           # location of configuration files to run METplus
            export metplusfix="$FIXgfs/fix_verif"                           # location of fix files to run METplus
            export METPLUSSH="$USHgfs/metplusjob.sh"                        # METplus job script
            export fhmin=$FHMIN_GFS                                         # start verification forecast hour
            export fhmax=$FHMAX_GFS                                         # end verification forecast hour
            export anltype="gfs"                                            # default=gfs, analysis type for verification (future support for other analysis files)
            export grid2grid_typelist="anom pres sfc"                       # type of verifications to run for grid-to-grid
            export grid2obs_typelist="conus_sfc upper_air"                  # type of verifications to run for grid-to-obs
            export precip_accumlist="24"                                    # accumulation lengths (in hrs) to verify
            export gather_by="VSDB_format"                                  # how to gather METplus output: VSDB_format (future support: valid_format)
            export vhr_rain=$FHMAX_GFS                                      # needed to create 0.25 deg grib1 files
            export ftyplist="pgbf"                                          # file types: pgbf (future support: pgbq and flxf)
            export ptyplist="APCP"                                          # precip types in GRIB: APCP (future support: PRATE)
            export fbucketlist="6"                                          # file accumulation bucket in hrs: 6 (future support: other accums, bucket=0 -- continuous accumulation)

            export STEP2_START_DATE="$SDATE"                                # starting date for METplus plots
            export STEP2_END_DATE="$EDATE"                                  # ending date for METplus plots
            export webhost="emcrzdm.ncep.noaa.gov"                          # webhost(rzdm) computer
            export webhostid="$USER"                                        # webhost(rzdm) user name
            export SEND2WEB="NO"                                            # whether or not to send maps to webhost
            export WEBDIR="/home/people/emc/www/htdocs/gmb/${webhostid}/METplus/$PSLOT"
            export mdlist="gfs $PSLOT "                                     # exps (up to 10) to compare in maps
        fi
    fi
fi

#----------------------------------------------------------
# Minimization, Radiance and Ozone Monitoring
#----------------------------------------------------------

if [ $VRFYRAD = "YES" -o $VRFYMINMON = "YES" -o $VRFYOZN = "YES" ]; then

    export envir="para"

    # Radiance Monitoring
    if [[ "$VRFYRAD" == "YES" && "$CDUMP" == "$CDFNL" ]] ; then

        export RADMON_SUFFIX=$PSLOT
        export TANKverf="$NOSCRUB/monitor/radmon"
        if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" -o $machine = "THEIA" ]; then
            export VRFYRADSH="$HOMEgfs/jobs/JGDAS_VERFRAD"
        else
            echo "WARNING: Radiance monitoring is not enabled on $machine!"
            export VRFYRAD="NO"
        fi

    fi

    # Minimization Monitoring
    if [[ "$VRFYMINMON" = "YES" ]] ; then

        export MINMON_SUFFIX=$PSLOT
        export M_TANKverf="$NOSCRUB/monitor/minmon"
        if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" -o $machine = "THEIA" ]; then
            if [[ "$CDUMP" = "gdas" ]] ; then
                export VRFYMINSH="$HOMEgfs/jobs/JGDAS_VMINMON"
            elif [[ "$CDUMP" = "gfs" ]] ; then
                export VRFYMINSH="$HOMEgfs/jobs/JGFS_VMINMON"
            fi
        else
            echo "WARNING: Minimization monitoring is not enabled on $machine!"
            export VRFYMINMON="NO"
        fi

    fi

    # Ozone Monitoring
    if [[ "$VRFYOZN" == "YES" && "$CDUMP" == "$CDFNL" ]] ; then

        export HOMEgfs_ozn="$HOMEgfs"
        export OZNMON_SUFFIX=$PSLOT
        export TANKverf_ozn="$NOSCRUB/monitor/oznmon"
        if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" -o $machine = "THEIA" ]; then
            export VRFYOZNSH="$HOMEgfs/jobs/JGDAS_VERFOZN"
        else
            echo "WARNING: Ozone monitoring is not enabled on $machine!"
            export VRFYOZN="NO"
        fi

    fi

fi


#-------------------------------------------------
# Cyclone genesis and cyclone track verification
#-------------------------------------------------

if [ $machine = "WCOSS_C" ] ; then
    export ens_tracker_ver=v1.1.13.1
    export HOMEens_tracker=$BASE_GIT/ens_tracker.${ens_tracker_ver}
elif [ $machine = "WCOSS_DELL_P3" ] ; then
    export ens_tracker_ver=v1.1.13.1
    export HOMEens_tracker=$BASE_GIT/ens_tracker.${ens_tracker_ver}
elif [ $machine = "THEIA" ] ; then
    export ens_tracker_ver=v1.1.13.2
    export HOMEens_tracker=$BASE_GIT/tracker/ens_tracker.${ens_tracker_ver}
else
    echo "WARNING: Genesis and cyclone verifications are not enabled on $machine!"
    export VRFYGENESIS="NO"
    export VRFYTRAK="NO"
fi


if [ "$VRFYTRAK" = "YES" ]; then

    export TRACKERSH="$HOMEgfs/jobs/JGFS_CYCLONE_TRACKER"
    if [ "$CDUMP" = "gdas" ]; then
        export FHOUT_CYCLONE=3            
        export FHMAX_CYCLONE=$FHMAX
    else
        export FHOUT_CYCLONE=6            
        export FHMAX_CYCLONE=$(( FHMAX_GFS<240 ? FHMAX_GFS : 240 ))
    fi
    if [ $machine = "THEIA" ]; then
       export COMROOTp1="/scratch4/NCEPDEV/rstprod/com"
       export COMINsyn="$COMROOTp1/arch/prod/syndat"
    fi
fi


if [[ "$VRFYGENESIS" == "YES" && "$CDUMP" == "gfs" ]]; then

    if [ $machine = "WCOSS_C" -o $machine = "WCOSS_DELL_P3" -o $machine = "THEIA" ] ; then
        export GENESISSH="$HOMEgfs/jobs/JGFS_CYCLONE_GENESIS"
    else
        echo "WARNING: Genesis verification is not enabled on $machine!"
        export VRFYGENESIS="NO"
        export GENESISSH=""
    fi
fi

if [[ "$RUNMOS" == "YES" && "$CDUMP" == "gfs" ]]; then

    if [ $machine = "WCOSS_C" ] ; then
        export RUNGFSMOSSH="$HOMEgfs/scripts/run_gfsmos_master.sh.cray"
    elif [ $machine = "WCOSS_DELL_P3" ] ; then
        export RUNGFSMOSSH="$HOMEgfs/scripts/run_gfsmos_master.sh.dell"
    else
        echo "WARNING: MOS package is not enabled on $machine!"
        export RUNMOS="NO"
        export RUNGFSMOSSH=""
    fi
fi



echo "END: config.vrfy"
