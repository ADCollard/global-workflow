# grid-to-obs - conus_sfc step 1b configurations
#
[dir]
#
OUTPUT_BASE = {ENV[rundir_g2o1]}
LOG_DIR = {ENV[rundir_g2o1]}/logs/{ENV[exp]}
TMP_DIR = /tmp

## Input data directories
## This is the location of your input files for METplus
#
# POINT_STAT
#
# Forecast and Obs file input directories (netCDF files)
FCST_INPUT_DIR = {ENV[rundir_g2o1]}/data/{ENV[exp]}
OBS_INPUT_DIR = {ENV[pb2nc_conus_sfc_dir]}

# Final output directory for point_stat output
POINT_STAT_OUTPUT_DIR = {ENV[point_stat_conus_sfc_dir]}/poejob{ENV[poejobnum]}
#
[config]
#
LOG_METPLUS = {LOG_DIR}/master_metplus.log.g2oconussfc_step1b.for{ENV[VDATE]}{ENV[vhr_start]}.var{ENV[VAR]}{ENV[VAR_LEVELS]}.runon{LOG_TIMESTAMP_TEMPLATE}
METPLUS_CONF = {OUTPUT_BASE}/confs/{ENV[exp]}/metplus_final_g2oconusfc_step1b.var{ENV[VAR]}{ENV[VAR_LEVELS]}.for{ENV[VDATE]}{ENV[vhr_start]}.conf
#
## Configuration-related settings such as the process list, begin and end times, etc.
PROCESS_LIST = PointStat

[config]
## LOOP_METHOD
## Options are: processes, times
## Looping by time- runs all items in the PROCESS_LIST for each
## initialization time and repeats until all times have been evaluated.
## Looping by processes- run each item in the PROCESS_LIST for all
## specified initialization times then repeat for the next item in the
## PROCESS_LIST.
LOOP_METHOD = processes

# Logging levels: DEBUG, INFO, WARN, ERROR (most verbose is DEBUG)
LOG_LEVEL = DEBUG

## OVERWRITE OPTIONS
## Don't overwrite files if they already exist.
## Set to no if you do NOT want to override existing files
## Set to yes if you do want to override existing files
OVERWRITE_NC_OUTPUT = yes

# Time method by which to perform validation, either by init time or by valid
# time. Indicate by either BY_VALID or BY_INIT
TIME_METHOD = BY_VALID

## MET Configuration files for pb2nc and point_stat
POINT_STAT_CONFIG_FILE = {ENV[metplusconfig]}/met_config/METV{ENV[METver]}/PointStatConfig_conus_sfc

# For processing by init time or valid time, indicate the start and end hours
# in HH format
START_HOUR = {ENV[vhr_start]}
END_HOUR = {ENV[vhr_end]}

# Indicate the begin and end date, and interval (in hours)
BEG_TIME = {ENV[VDATE]}
END_TIME = {ENV[VDATE]}
# Used by pb2nc
INTERVAL_TIME = 86400

# For both pb2nc and point_stat, the obs_window dictionary:
OBS_WINDOW_BEGIN = -2700
OBS_WINDOW_END = 2700

# start and end dates are created by combining the date with
# start and end hours (format can be hh, hhmm, or hhmmss.
START_DATE = {BEG_TIME}{START_HOUR}
END_DATE = {END_TIME}{END_HOUR}

# Either conus_sfc or upper_air
VERTICAL_LOCATION = conus_sfc

#
# POINT_STAT
#
# Forecast hour start, end, and interval. Interval is the forecast interval in
# hours.
FCST_HR_START = {ENV[fhrmin]}
FCST_HR_END =  {ENV[fhrmax]}
FCST_HR_INTERVAL = {ENV[fhrout_conus_sfc]}

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL_NAME = {ENV[exp]}
OBS_NAME = {ENV[prepbufr_conus_sfc]}

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
REGRID_TO_GRID = {ENV[grid_conus_sfc]}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID = {ENV[grid_conus_sfc]}
# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_POLY =
POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = ONLYSF

# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION
FCST_VAR1_NAME = {ENV[VAR]}
FCST_VAR1_OPTIONS = {ENV[VAR_GRBLVL_NUM_DESC]}
FCST_VAR1_LEVELS = {ENV[VAR_LEVELS]}

#
## REGEX PATTERN
#
[regex_pattern]
#
# POINT_STAT
#
# Regular expressions for files relevant to this use case. Use parentheses
# around any date, cycle and offset time.
#
OBS_INPUT_FILE_REGEX = .*prepbufr.(2[0-9]{9}).nc 
FCST_INPUT_FILE_REGEX = .*pgbf([0-9]{1,3}).gfs.(2[0-9]{9})
