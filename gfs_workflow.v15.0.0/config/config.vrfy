#!/bin/ksh -x
###############################################################
# < next few lines under version control, D O  N O T  E D I T >
# $Date$
# $Revision$
# $Author$
# $Id$
###############################################################

########## config.vrfy ##########
# Verification step specific

echo "BEGIN: config.vrfy"

# Get task specific resources
. $EXPDIR/config.resources vrfy

export VDUMP="gfs"       # verifying dump
export CDUMPFCST="gdas"  # Fit-to-obs with GDAS/GFS prepbufr
export CDFNL="gdas"      # Scores verification against GDAS/GFS analysis

# What we want turned ON/OFF
GRIB1_WORKS=YES
if [[ "$machine" == THEIA ]] ; then
    GRIB1_WORKS=NO
fi
export VSDB_STEP1="YES"           # populate VSDB database
export VSDB_STEP2="NO"
export VRFYG2OBS="$GRIB1_WORKS"   # Grid to observations, see note below if turning ON
export VRFYFITS="$GRIB1_WORKS"    # Fit to observations
export VRFYPRCP="YES"             # Precip threat scores
export VRFYMINMON="$GRIB1_WORKS"  # GSI minimization monitoring
export VRFYRAD="$GRIB1_WORKS"     # Radiance data assimilation monitoring
export VRFYOZN="NO"               # Ozone data assimilation monitoring
export VRFYTRAK="$GRIB1_WORKS"    # Hurricane track forecasts
export VRFYGENESIS="$GRIB1_WORKS" # Cyclone genesis
export VRFYGMPK="NO"              # Gempak verification

# Fit to Observations
if [ $VRFYFITS = "YES" ]; then

    if [ $machine = "WCOSS_C" ]; then
        export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
        export PREPQFITSH="$fitdir/subfits_cray_nems"
    elif [ $machine = "THEIA" ]; then
        export fitdir="$BASE_SVN/verif/global/parafits.fv3nems/batrun"
        export PREPQFITSH="$fitdir/subfits_theia_nems"
    fi

fi

# VSDB STEP1, Verify Precipipation and Grid To Obs options
# All these call $VSDBSH
if [[ "$CDUMP" = "gfs" ]] ; then

    if [ $VSDB_STEP1 = "YES" -o $VRFYPRCP = "YES" -o $VRFYG2OBS = "YES" ]; then
        export BACKDATEVSDB=24                          # execute vsdbjob for the previous day
        export VBACKUP_PRCP=24                          # back up for QPF verification data
        export vsdbsave="$NOSCRUB/archive/vsdb_data"    # place to save vsdb database
        export vsdbhome=$BASE_VERIF                     # location of global verification scripts
        export VSDBSH="$vsdbhome/vsdbjob.sh"            # VSDB job script
        export vlength=$FHMAX_GFS                       # verification length
        export vhr_rain=$FHMAX_GFS                      # verification length for precip
        export ftyplist="pgbq"                          # verif. files used for computing QPF ETS scores
    fi

fi

# Minimization, Radiance and Ozone Monitoring
if [ $VRFYRAD = "YES" -o $VRFYMINMON = "YES" -o $VRFYOZN = "YES" ]; then

    export HOMEgdas="$BASE_GDAS"
    export envir="para"

    # Radiance Monitoring
    if [[ "$VRFYRAD" == "YES" && "$CDUMP" == "$CDFNL" ]] ; then

        export HOMEradmon="$BASE_GSM"
        export RADMON_SUFFIX=$PSLOT
        export TANKverf="$NOSCRUB/radmon"
        if [ $machine = "WCOSS_C" -o $machine = "THEIA" ]; then
            export VRFYRADSH="$HOMEgdas/jobs/JGDAS_VERFRAD"
        else
            echo "WARNING: Radiance monitoring is not enabled on $machine!"
            export VRFYRAD="NO"
        fi

    fi

    # Minimization Monitoring
    if [[ "$VRFYMINMON" = "YES" ]] ; then

        export HOMEgfs="$BASE_GFS"
        export HOMEminmon=$BASE_GSM
        export MINMON_SUFFIX=$PSLOT
        export M_TANKverf="$NOSCRUB/minmon"
        if [[ "$machine" == "WCOSS_C" || "$machine" == "THEIA" ]] ; then
            if [[ "$CDUMP" = "gdas" ]] ; then
                export VRFYMINSH="$HOMEgdas/jobs/JGDAS_VMINMON"
            elif [[ "$CDUMP" = "gfs" ]] ; then
                export VRFYMINSH="$HOMEgfs/jobs/JGFS_VMINMON"
            fi
        else
            echo "WARNING: Minimization monitoring is not enabled on $machine!"
            export VRFYMINMON="NO"
        fi

    fi

    # Ozone Monitoring
    if [ $VRFYOZN = "YES" ]; then
        echo "WARNING: Ozone Monitoring is just a stub for now!"
        export VRFYOZN="NO"
        export OZNDIR="$NOSCRUB/$LOGNAME/ozone/stats/$PSLOT"
        export VRFYOZNSH=""
        export BASEDIR_OZNMON="$BASE_OZNMON/util/Ozone_Monitor"
    fi

fi

# Cyclone track verification
if [ $VRFYTRAK = "YES" ]; then

    export TRACKERSH="$BASE_GSM/ush/global_tracker.sh"
    export PARATRKR="$BASE_GSM/ush/global_extrkr.sh"
    export GETTRKEXEC="$BASE_GSM/exec/gettrk"
    export GETTX=$GETTRKEXEC
    export SUPVX="$BASE_GSM/exec/supvit"
    export HOMERELO=$BASE_GSM
    export homesyndir=$BASE_GSM
    export prep_step="$NWPROD/prod_util.v1.0.15/ush/prep_step"
    if [[ "$CDUMP" = "gfs" ]] ; then
        export FHOUT=$FHOUT_GFS
        export FHMAX=$FHMAX_GFS
        export FHMAX2=${FHMAX2_GFS:-$FHMAX_GFS} # We don't run FCST2
    fi
    if [ $machine = "THEIA" ]; then
       export COMROOTp1="/scratch4/NCEPDEV/rstprod/com"
       export archsyndir="$COMROOTp1/arch/prod/syndat"
    fi
fi

# Cyclone genesis verification
if [ $VRFYGENESIS = "YES" ]; then

    if [ $machine = "WCOSS_C" ] ; then
        #export NWROOTGENESIS="/gpfs/hps3/emc/global/noscrub/emc.glopara/svn/gfs/q3fy17"
        export NWROOTGENESIS="/gpfs/hps3/emc/global/noscrub/Fanglin.Yang/svn/fv3gfs"     
    elif [ $machine = "THEIA" ] ; then
        export NWROOTGENESIS="/scratch4/NCEPDEV/global/save/glopara/svn/gfs/branches/gfs_q3fy17"
        export UTILROOT="/scratch4/NCEPDEV/global/save/glopara/nwpara/prod_util.v1.0.15"
        export GETTX_GEN="$NWROOTGENESIS/ens_tracker.v2.0.1/exec/gettrk_gen_g2_theia"
    fi
    if [ $machine = "WCOSS_C" -o $machine = "THEIA" ]; then
        export GENESISSH="$NWROOTGENESIS/ens_tracker.v2.0.1/gfs_genesis_para_fv3gfs.sh"
    else
        echo "WARNING: Genesis verification is not enabled on $machine!"
        export VRFYGENESIS="NO"
        export GENESISSH=""
    fi

    export GETTX_GEN="$NWROOTGENESIS/ens_tracker.v2.0.1/exec/gettrk_gen_g2"

fi

echo "END: config.vrfy"
