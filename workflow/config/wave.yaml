config_wave:
  filename: config.wave
  content: !expand |
      echo "BEGIN: config.wave"
      export wave_sys_ver=v1.0.0

      export COMPONENTwave=${COMPONENTwave:-${RUN}wave}
      export COMPONENTRSTwave=${COMPONENTRSTwave:-gdaswave}
      export HOMEwave=${HOMEwave:-${HOMEgfs}}
      export HOMEgefs=${HOMEgefs:-$NWROOT/$NET.${gefs_ver}}
      export HOMEgfs=${HOMEgfs:-$NWROOT/$NET.${gfs_ver}}
      export DATA=${DATA:-${DATAROOT:?}/${jobid}}
      
      # Grids for wave model
      export waveGRD='glo_10m aoc_9km ant_9km'
      export waveGRDN='1 2 3' # gridnumber for ww3_multi
      export waveGRDG='10 20 30' # gridgroup for ww3_multi
      
      # ESMF input grid
      export waveesmfGRD='glox_10m' # input grid
      
      # Grids for output fields
      export waveuoutpGRD=points
      export waveinterpGRD='glo_15mxt' # Grids that need to be interpolated from native
      # in POST will generate grib unless gribOK not set
      export wavesbsGRD=''  # side-by-side grids generated as wave model runs, writes to com
      export wavepostGRD='glo_10m aoc_9km ant_9km' # Native grids that will be post-processed (grib2)
      
      if [ "$CDUMP" = "gdas" ]
      then
        export FHMAX_WAV=${FHMAX_WAV:-9}
      fi
      export WAVHINDH=${WAVHINDH:-0}
      export FHMIN_WAV=${FHMIN_WAV:-0}
      export FHOUT_WAV=${FHOUT_WAV:-3}
      export FHMAX_WAV=${FHMAX_WAV:-384}
      export FHMAX_HF_WAV=${FHMAX_HF_WAV:-120}
      export FHOUT_HF_WAV=${FHOUT_HF_WAV:-1}
      
      # Output stride
      export WAV_WND_HOUR_INC=1      # This value should match with the one used in
      #                          # the wind update script
      # gridded and point output rate
      export DTFLD_WAV=`expr $FHOUT_HF_WAV \* 3600`
      export DTPNT_WAV=3600
      export FHINCP_WAV=`expr $DTPNT_WAV / 3600`
      
      # Grids for input fields
      export WAVEICE_DID=sice
      export WAVEICE_FID=icean_5m
      export WAVECUR_DID=rtofs
      export WAVECUR_FID=rtofs_5m
      export WAVEWND_DID=
      export WAVEWND_FID=
      
      # Selected output parameters (gridded)
      export OUTPARS_WAV="WND CUR ICE HS T01 T02 DIR FP DP PHS PTP PDIR CHAR"
      
      # Options for point output (switch on/off boundary point output)
      # export DOIBP_WAV='NO'
      #
      # # Intake currents settings
      export WAV_CUR_DT=${WAV_CUR_DT:-3}
      export WAV_CUR_HF_DT=${WAV_CUR_HF_DT:-1}
      export WAV_CUR_HF_FH=${WAV_CUR_HF_FH:-72}
      export WAV_CUR_CDO_SMOOTH="NO"
      
      # Number of cycles to look back for restart files
      export nback=
      
      if [ "$CDUMP" = "gdas" ]
      then
        WAVNCYC=4
        WAVHCYC=6
        FHMAX_WAV_CUR=${FHMAX_WAV_CUR:-48} # RTOFS forecasts only out to 8 days
      elif [ ${gfs_cyc} -ne 0 ]
      then
        FHMAX_WAV_CUR=${FHMAX_WAV_CUR:-192} # RTOFS forecasts only out to 8 days
        WAVHCYC=`expr 24 / ${gfs_cyc}`
      else
        WAVHCYC=0
        FHMAX_WAV_CUR=${FHMAX_WAV_CUR:-192} # RTOFS forecasts only out to 8 days
      fi
      export FHMAX_WAV_CUR WAVHCYC WAVNCYC
      
      export RSTTYPE_WAV='T' # generate second tier of restart files
      export DT_1_RST_WAV=10800 # time between restart files, set to DTRST=1 for a single restart file
      export DT_2_RST_WAV=43200  # restart stride for checkpointing restart
      export RSTIOFF_WAV=0 # first restart file offset relative to model start
      
      export RUNMEM=${RUNMEM:--1}
      
      if [ $RUNMEM = -1 ]; then
      # No suffix added to model ID in case of deterministic run
      export waveMEMB=
      else
      # Extract member number only
      export waveMEMB=`echo $RUNMEM | grep -o '..$'`
      fi
      #
      # Determine if wave component needs input and/or is coupled
      export WW3ATMINP='CPL'
      export WW3ICEINP='YES'
      export WW3CURINP='YES'
      #
      if [ "${WW3ICEINP}" = "YES" ]; then
      export WAVICEFILE=${CDUMP}.t${cyc}z.seaice.5min.grib2
      fi
      #
      # Determine if input is from perturbed ensemble (T) or single input file (F) for all members
      export WW3ATMIENS='F'
      export WW3ICEIENS='F'
      export WW3CURIENS='F'
      #
      
      # Set resources to propagate NTASKS across cfp call
      export NTASKS=${NTASKS:-${npe_node_waveinit}}
      #
      # # Path to HOME Directory
      export CODEwave=${CODEwave:-${HOMEfv3gfs}/WW3}
      export EXECwave=${EXECwave:-$HOMEwave/exec}
      export FIXwave=${FIXwave:-$HOMEwave/fix/fix_wave_${NET}}
      export PARMwave=${PARMwave:-$HOMEwave/parm/wave}
      export USHwave=${USHwave:-$HOMEwave/ush}
      export EXECcode=${EXECcode:-$CODEwave/exec}
      #
      # # Set COM Paths and GETGES environment
      export COMINwave=${COMINwave:-${ROTDIR:?}}
      export COMOUTwave=${COMOUTwave:-${ROTDIR:?}}
      export COMIN=${COMIN:-${COMINwave}/${COMPONENTwave}.${PDY}/${cyc}}
      export COMOUT=${COMOUT:-${COMOUTwave}/${COMPONENTwave}.${PDY}/${cyc}}
      export COMINice=${COMINice:-${COMROOTp2}/omb/prod}
      export COMINwnd=${COMINwnd:-${COMROOT}/gfs/prod}
      export COMIN_WAV_CUR=${COMIN_WAV_CUR:-${COMROOTp2}/rtofs/prod}
      #
      export MP_PULSE=0
      
      if [ $RUN_ENVIR = "nco" ]; then
        export COMIN_WAV_ICE=${COMIN_WAV_ICE:-$(compath.py gfs/prod)}/${CDUMP}.${PDY}/${cyc}
        export COMIN_WAV_WND=${COMIN_WAV_WND:-$(compath.py gfs/prod)}/${CDUMP}.${PDY}/${cyc}
        export COMIN_WAV_CUR=${COMIN_WAV_CUR:-$(compath.py ${WAVECUR_DID}/prod)}/${WAVECUR_DID}.${RPDY}
        if [ ! -d $COMIN_WAV_CUR ]; then
          export RPDY=`$NDATE -24 ${PDY}00 | cut -c1-8`
          export COMIN_WAV_CUR=$(compath.py ${WAVECUR_DID}/prod)/${WAVECUR_DID}.${RPDY}
        fi
      else
        if [ ! -d $DMPDIR/${WAVECUR_DID}.${RPDY} ]; then export RPDY=`$NDATE -24 ${PDY}00 | cut -c1-8`; fi
        if [ ! -L $ROTDIR/${WAVECUR_DID}.${RPDY} ]; then # Check if symlink already exists in ROTDIR
          $NLN $DMPDIR/${WAVECUR_DID}.${RPDY} $ROTDIR/${WAVECUR_DID}.${RPDY}
        fi
        $NLN $DMPDIR/$CDUMP.${PDY}/$cyc/${WAVICEFILE} $ROTDIR/$CDUMP.${PDY}/$cyc/${WAVICEFILE}
        export COMIN_OBS=${COMIN_OBS:-$ROTDIR/$RUN.$PDY/$cyc}
        export COMIN_WAV_ICE=${COMIN_OBS}
        export COMIN_WAV_WND=${COMIN_OBS}
        export COMIN_WAV_CUR=${ROTDIR}/${WAVECUR_DID}.${RPDY}
      fi
      
      export wavelog=${COMOUTwave}/wave.log
      
      # Set mpi serial command
      export wavempexec=${wavempexec:-"mpirun -n"}
      export wave_mpmd=${wave_mpmd:-"cfp"}
      #
      # # Set wave model ID tag to include member number
      # # if ensemble; waveMEMB var empty in deterministic
      export WAV_MOD_TAG=${COMPONENTwave}${waveMEMB}
      #
      echo "END: config.wave"
