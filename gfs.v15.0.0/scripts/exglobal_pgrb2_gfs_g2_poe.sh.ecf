#####################################################################
echo "-----------------------------------------------------"
echo " exglobal_pgrb2_gfs_g2.sh.ecf" 
echo " Produces Global 1p0 deg grid , 0.25x0.25 degree, 0.5x0.5"
echo " degree, 2.5x2.5 degree pgrb2 GRIB2 files from GFS master."
echo "-----------------------------------------------------"
#####################################################################

set -x

cd $DATA

msg="HAS BEGUN on `hostname`"
postmsg "$jlogfile" "$msg"

############################################################
#  Define Variables:
#  -----------------
#  SHOUR        is the starting forecast hour. normally 0 except for restarts.
#  FHOUR        is the ending forecast hour.
#  FHINC        is the increment hour for each forecast steps.
#  FH           is the current forecast hour.
#  SLEEP_TIME   is the number of seconds to sleep before exiting with error.
#  SLEEP_INT    is the number of seconds to sleep between restrt file checks.
#  restart_file is the name of the file to key off of to kick off pgrb 
#               generation.
############################################################

# Set type of Interpolation for WGRIB2
export opt1=' -set_grib_type same -new_grid_winds earth '
export opt21='  -new_grid_interpolation bilinear -if '
export opt22=":(LAND|CSNOW|CRAIN|CFRZR|CICEP|ICSEV):"
export opt23=' -new_grid_interpolation neighbor -fi '

# Set grid 0p25 deg LAT/LON
export grid0p25="latlon 0:1440:0.25 90:721:-0.25"

############################################################
# Process Analysis Files before starting the Forecast Files
############################################################
#if test -f $COMIN/${RUN}.t${cyc}z.master.grb2ianl -a ${SHOUR} -eq 0
if [ $post_times = anl ]; then
  cp $COMIN/${RUN}.t${cyc}z.master.grb2anl masterfile_anl

  paramlist=$PARMgfs/global_1x1_paramlist_g2.anl #for regular pgrb2 files
  $WGRIB2 masterfile_anl | grep -F -f $paramlist | $WGRIB2 -i -grib master_pgrb2_anl masterfile_anl
  $WGRIB2 master_pgrb2_anl $opt1 $opt21 $opt22 $opt23 -new_grid $grid0p25 tmpfile_anl

  paramlistb=$PARMgfs/global_master-catchup_parmlist_g2   #for pgrb2b files
  $WGRIB2 masterfile_anl | grep -F -f $paramlistb | $WGRIB2 -i -grib  master_pgrb2b_anl masterfile_anl
  $WGRIB2 master_pgrb2b_anl $opt1 $opt21 $opt22 $opt23 -new_grid $grid0p25 tmpfile3_anl

  $WGRIB2 tmpfile_anl -s > tmpfile2i_anl
  $WGRIB2 tmpfile3_anl -s > tmpfile3i_anl

  if test "$SENDCOM" = 'YES'
  then
    cp tmpfile_anl   $COMOUT/${RUN}.${cycle}.pgrb2.0p25.anl
    cp tmpfile2i_anl $COMOUT/${RUN}.${cycle}.pgrb2.0p25.anl.idx
    cp tmpfile3_anl  $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.anl
    cp tmpfile3i_anl $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.anl.idx

    if test "$SENDDBN" = 'YES'
    then
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2_0P25 $job $COMOUT/${RUN}.${cycle}.pgrb2.0p25.anl
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2_0P25_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2.0p25.anl.idx
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2B_0P25 $job $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.anl
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2B_0P25_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.anl.idx
    fi
  fi
  
  export fhr=anl
  mkdir -m 775 pgrb2_0p50 pgrb2_1p00 pgrb2_2p50 pgrb2b_0p50 pgrb2b_1p00 pgrb2b_2p50
  echo "$USHgfs/gfs_prdgen.sh anl pgrb2 0p50" >> poescript
  echo "$USHgfs/gfs_prdgen.sh anl pgrb2 1p00" >> poescript
  echo "$USHgfs/gfs_prdgen.sh anl pgrb2b 0p50" >> poescript
  echo "$USHgfs/gfs_prdgen.sh anl pgrb2b 1p00" >> poescript
  echo hostname >> poescript  

  chmod 775 poescript
  export MP_PGMMODEL=mpmd
  export MP_CMDFILE=$DATA/poescript
#  mpirun.lsf
  $APRUN $DATA/poescript
  export err=$?;err_chk

exit
fi

SLEEP_LOOP_MAX=`expr $SLEEP_TIME / $SLEEP_INT`

# modify to submit one prdgen job at a time
# ############################################################
# # Loop Through the Post Forecast Files
# ############################################################
#
for fhr in $post_times
do

  ###############################
  #  Start Looping for the
  # existence of the restart files
  ###############################
  set -x
  export pgm="postcheck"
  ic=1
  while [ $ic -le $SLEEP_LOOP_MAX ]
  do 
    if test -f $restart_file$fhr
    then
      break
    else
      ic=`expr $ic + 1`
      sleep $SLEEP_INT
    fi
    ###############################
    #If we reach this point assume
    #fcst job never reached restart
    # period and error exit
    ###############################
    if [ $ic -eq $SLEEP_LOOP_MAX ]
    then
      export err=9
      err_chk
    fi
  done
  set -x

  msg="Starting post for fhr=$fhr"
  postmsg "$jlogfile" "$msg"

  cp $COMIN/${RUN}.t${cyc}z.master.grb2f$fhr masterfile_$fhr

  if test $fhr -eq 0
  then
    paramlist=$PARMgfs/global_1x1_paramlist_g2.f000
  else
    paramlist=$PARMgfs/global_1x1_paramlist_g2
  fi
  
  paramlistb=$PARMgfs/global_master-catchup_parmlist_g2

  comfilesize=`ls -lrt $COMIN/${RUN}.t${cyc}z.master.grb2f$fhr | awk '{print $5}'`
  dirfilesize=`ls -lrt masterfile_$fhr | awk '{print $5}'`
  if [ $comfilesize -ne $dirfilesize ]; then
    err_exit "Input file size does not match copy in working directory"
  fi

  $WGRIB2 masterfile_$fhr | grep -F -f $paramlist | $WGRIB2 -i -grib  master_pgrb2_$fhr masterfile_$fhr
  $WGRIB2 masterfile_$fhr | grep -F -f $paramlistb | $WGRIB2 -i -grib master_pgrb2b_$fhr masterfile_$fhr
 
  $WGRIB2 master_pgrb2_$fhr  $opt1 $opt21 $opt22 $opt23 -new_grid $grid0p25 tmpfile_$fhr
#generate second land mask using bi-linear interpolation and append to the end
  rm -f land.grb newland.grb newnewland.grb
  $WGRIB2 master_pgrb2_$fhr -match "LAND:surface" -grib land.grb
  $WGRIB2 land.grb -set_grib_type same -new_grid_interpolation bilinear -new_grid_winds earth -new_grid $grid0p25 newland.grb 
  $WGRIB2 newland.grb -set_byte 4 11 218 -grib newnewland.grb
  cat ./newnewland.grb >> tmpfile_$fhr 
#   
  $WGRIB2 master_pgrb2b_$fhr $opt1 $opt21 $opt22 $opt23 -new_grid $grid0p25 tmpfile3_$fhr

  $WGRIB2 tmpfile_$fhr -s > tmpfile2i_$fhr
  $WGRIB2 tmpfile3_$fhr -s > tmpfile3i_$fhr

  if [ $fhr -lt 100 ]; then
    fhr3=0$fhr
  else
    fhr3=$fhr
  fi

  if test "$SENDCOM" = 'YES'
  then
    cp tmpfile_$fhr  $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}
    cp tmpfile2i_$fhr $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}.idx
    cp tmpfile3_$fhr  $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.f${fhr3}
    cp tmpfile3i_$fhr $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.f${fhr3}.idx

    if test "$SENDDBN" = 'YES'
    then
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2_0P25 $job $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2_0P25_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}.idx
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2B_0P25 $job $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.f${fhr3}
      $DBNROOT/bin/dbn_alert MODEL GFS_PGB2B_0P25_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2b.0p25.f${fhr3}.idx
    fi
  fi

  mkdir -m 775 pgrb2_0p50 pgrb2_1p00 pgrb2_2p50 pgrb2b_0p50 pgrb2b_1p00
  echo "$USHgfs/gfs_prdgen.sh $fhr pgrb2 0p50" >> poescript
  echo "$USHgfs/gfs_prdgen.sh $fhr pgrb2 1p00" >> poescript
  echo "$USHgfs/gfs_prdgen.sh $fhr pgrb2 2p50" >> poescript
  echo "$USHgfs/gfs_prdgen.sh $fhr pgrb2b 0p50" >> poescript
  echo "$USHgfs/gfs_prdgen.sh $fhr pgrb2b 1p00" >> poescript

  chmod 775 poescript
  export MP_PGMMODEL=mpmd
  export MP_CMDFILE=$DATA/poescript
#  mpirun.lsf

  $APRUN  $DATA/poescript
  export err=$?; err_chk

done

########################################################

msg='ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################## END OF SCRIPT #######################
