#!/bin/ksh
################################################################################
# UNIX Script Documentation Block
# Script name:         exglobal_fcst_fv3gfs.sh.ecf
# Script description:  Runs a global FV3GFS model forecast
#
# Author:   Fanglin Yang       Org: NCEP/EMC       Date: 2016-11-15
# Abstract: This script runs a single GFS forecast with FV3 dynamical core.
#           This script is created based on a C-shell script that GFDL wrote
#           for the NGGPS Phase-II Dycore Comparison Project.
#
# Script history log:
# 2016-11-15  Fanglin Yang   First Version.
# 2017-02-09  Rahul Mahajan  Added warm start and restructured the code.
# 2017-03-10  Fanglin Yang   Updated for running forecast on Cray.
#
# Attributes:
#   Language: Portable Operating System Interface (POSIX) Shell
#   Machine: WCOSS-CRAY, Theia
################################################################################

#  Set environment.
export VERBOSE=${VERBOSE:-"YES"}
if [ $VERBOSE = "YES" ] ; then
  echo $(date) EXECUTING $0 $* >&2
  set -x
fi

# This should be in the script that calls this script, not here
export machine=${machine:-WCOSS_C}
export machine=$(echo $machine|tr '[a-z]' '[A-Z]')
if [ $machine = WCOSS_C ] ; then
 . $MODULESHOME/init/sh 2>/dev/null
 export PRGENV=${PRGENV:-intel}
 export HUGEPAGES=${HUGEPAGES:-hugepages4M}
 module  unload prod_util iobuf PrgEnv-$PRGENV craype-$HUGEPAGES 2>/dev/null
 module  load   prod_util iobuf/2.0.8 PrgEnv-$PRGENV craype-$HUGEPAGES 2>/dev/null
 export IOBUF_PARAMS=${IOBUF_PARAMS:-'*:size=8M:verbose'}
 export MPICH_GNI_COLL_OPT_OFF=${MPICH_GNI_COLL_OPT_OFF:-MPI_Alltoallv}
fi

# Cycling and forecast hour specific parameters
export CASE=${CASE:-C768}
export CDATE=${CDATE:-2016100300}
export CDUMP=${CDUMP:-gdas}
export FHMIN=${FHMIN:-3}
export FHMAX=${FHMAX:-9}
export FHOUT=${FHOUT:-3}
export FHZER=${FHZER:-6}
export FHCYC=${FHCYC:-0}

# Directories.
pwd=$(pwd)
export NWPROD=${NWPROD:-${NWROOT:-$pwd}}
export BASE_GSM=${BASE_GSM:-$NWPROD}
export FIX_DIR=${FIX_DIR:-$BASE_GSM/fix}
export FIX_AM=${FIX_AM:-$FIX_DIR/fix_am}
export FIX_FV3=${FIX_FV3:-$FIX_DIR/fix_fv3}
export DATA=${DATA:-$pwd/fv3tmp$$}  #temporary running directory
export COMROT=${COMROT:-$pwd}       #rotating directory
export IC_DIR=${IC_DIR:-$pwd}       #cold start initial conditions

# Model resolution specific parameters
export DELTIM=${DELTIM:-225}
export layout_x=${layout_x:-8}
export layout_y=${layout_y:-16}
export cdmbgwd=${cdmbgwd:-"3.5,0.25"}
export LEVS=${LEVS:-64}

# Utilities
export NCP=${NCP:-"/bin/cp -p"}
export NLN=${NLN:-"/bin/ln -sf"}
export SEND=${SEND:-"YES"}   #move final result to rotating directory
export ERRSCRIPT=${ERRSCRIPT:-'eval [[ $err = 0 ]]'}
export NDATE=${NDATE:-$NWPROD/util/exec/ndate}

# Other options
export MEMBER=${MEMBER:-"-1"} # -1: control, 0: ensemble mean, >0: ensemble member $MEMBER

# Model specific stuff
export EXECDIR=${EXECDIR:-${FCSTEXECDIR:-$BASE_GSM/sorc/fv3gfs.fd/BUILD/bin}}
export FCSTEXEC=${FCSTEXEC:-fv3_gfs.x}
export PARM_FV3DIAG=${PARM_FV3DIAG:-$BASE_GSM/parm/parm_fv3diag}

# Model config options
export APRUN_FV3=${APRUN_FV3:-${APRUN_FCST:-${APRUN:-""}}}
export NTHREADS_FV3=${NTHREADS_FV3:-${NTHREADS_FCST:-${nthreads:-${nth_f:-1}}}}
export cores_per_node=${cores_per_node:-${npe_node_f:-24}}
export ntiles=${ntiles:-6}
export TYPE=${TYPE:-"nh"}                  # choices:  nh, hydro
export MONO=${MONO:-"non-mono"}            # choices:  mono, non-mono

#-------------------------------------------------------
if [ ! -d $COMROT ]; then mkdir -p $COMROT; fi
if [ ! -d $DATA ]; then mkdir -p $DATA ;fi
mkdir -p $DATA/RESTART $DATA/INPUT
cd $DATA || exit 8

#-------------------------------------------------------
# member directory
if [ $MEMBER -lt 0 ]; then
  prefix=$CDUMP
  memchar=""
else
  prefix=enkf.$CDUMP
  memchar=mem`printf %03i $MEMBER`
fi
cymd=`echo $CDATE | cut -c1-8`
chh=`echo   $CDATE | cut -c9-10`
memdir=$COMROT/${prefix}.$cymd/$chh/$memchar
if [ ! -d $memdir ]; then mkdir -p $memdir; fi

#-------------------------------------------------------
# initial conditions
export warm_start=${warm_start:-".false."}
export read_increment=${read_increment:-".false."}
export increment_file=${increment_file:-$memdir/${CDUMP}.t${chh}z.atminc.nc}

if [ $warm_start = ".false." ]; then
  if [ -d $IC_DIR/${CASE}_$CDATE ]; then
    $NCP $IC_DIR/${CASE}_$CDATE/* $DATA/INPUT/.
  else
    for file in $memdir/INPUT/*.nc; do
      file2=$(echo $(basename $file))
      fsuf=`echo $file2 | cut -c1-3`
      if [ $fsuf = "gfs" -o $fsuf = "sfc" ]; then
        $NLN $file $DATA/INPUT/$file2
      fi
    done
  fi
else
  # Handle .res.tile?.nc and .suf.tile?.nc files
  for file in $memdir/RESTART/${cymd}.${chh}0000.*.nc; do
    file2=$(echo $(basename $file))
    file2=`echo $file2 | cut -d. -f3-` # remove the date from file
    fres=`echo $file2 | cut -d. -f2`
    fsuf=`echo $file2 | cut -d. -f1 | cut -c1-3`
    if [ $fres = "res" -o $fsuf = "sfc" ]; then
      $NLN $file $DATA/INPUT/$file2
    fi
  done
  # Handle coupler.res file
  if [ ${USE_COUPLER_RES:-"YES"} = "YES" ]; then
    file=$memdir/RESTART/${cymd}.${chh}0000.coupler.res
    file2=$(echo $(basename $file))
    file2=`echo $file2 | cut -d. -f3-` # remove the date from file
    $NLN $file $DATA/INPUT/$file2
  fi
  if [ $read_increment = ".true." ]; then
    if [ -f $increment_file ]; then
      $NLN $increment_file $DATA/INPUT/fv3_increment.nc
    else
      export read_increment=".false."
    fi
  fi
fi
nfiles=`ls -1 $DATA/INPUT/* | wc -l`
if [ $nfiles -lt 0 ]; then
  echo "Initial conditions must exist in $DATA/INPUT, ABORT!"
  exit 1
fi

#--------------------------------------------------------------------------
# Grid and orography data
for n in `seq 1 $ntiles`; do
  $NLN $FIX_FV3/$CASE/${CASE}_grid.tile${n}.nc     $DATA/INPUT/${CASE}_grid.tile${n}.nc
  $NLN $FIX_FV3/$CASE/${CASE}_oro_data.tile${n}.nc $DATA/INPUT/oro_data.tile${n}.nc
done
$NLN $FIX_FV3/$CASE/${CASE}_mosaic.nc  $DATA/INPUT/grid_spec.nc

# GFS standard input data

export IEMS=${IEMS:-1}
export ISOL=${ISOL:-2}
export IAER=${IAER:-111}
export ICO2=${ICO2:-2}

$NLN $FIX_AM/global_solarconstant_noaa_an.txt  $DATA/INPUT/solarconstant_noaa_an.txt
$NLN $FIX_AM/global_o3prdlos.f77               $DATA/INPUT/global_o3prdlos.f77
$NLN $FIX_AM/global_sfc_emissivity_idx.txt     $DATA/INPUT/sfc_emissivity_idx.txt

$NLN $FIX_AM/global_co2historicaldata_glob.txt $DATA/INPUT/co2historicaldata_glob.txt
$NLN $FIX_AM/co2monthlycyc.txt                 $DATA/INPUT/co2monthlycyc.txt
if [ $ICO2 -gt 0 ]; then
  for file in `ls $FIX_AM/fix_co2_proj/global_co2historicaldata* ` ; do
    $NLN $file $DATA/INPUT/$(echo $(basename $file) | sed -e "s/global_//g")
  done
fi

$NLN $FIX_AM/global_climaeropac_global.txt     $DATA/INPUT/aerosol.dat
if [ $IAER -gt 0 ] ; then
  for file in `ls $FIX_AM/global_volcanic_aerosols* ` ; do
    $NLN $file $DATA/INPUT/$(echo $(basename $file) | sed -e "s/global_//g")
  done
fi

export FNGLAC=${FNGLAC:-"$FIX_AM/global_glacier.2x2.grb"}
export FNMXIC=${FNMXIC:-"$FIX_AM/global_maxice.2x2.grb"}
export FNTSFC=${FNTSFC:-"$FIX_AM/cfs_oi2sst1x1monclim19822001.grb"}
export FNSNOC=${FNSNOC:-"$FIX_AM/global_snoclim.1.875.grb"}
export FNZORC=${FNZORC:-"$FIX_AM/global_zorclim.1x1.grb"}
export FNALBC=${FNALBC:-"$FIX_AM/global_albedo4.1x1.grb"}
export FNAISC=${FNAISC:-"$FIX_AM/cfs_ice1x1monclim19822001.grb"}
export FNTG3C=${FNTG3C:-"$FIX_AM/global_tg3clim.2.6x1.5.grb"}
export FNVEGC=${FNVEGC:-"$FIX_AM/global_vegfrac.0.144.decpercent.grb"}
export FNVETC=${FNVETC:-"$FIX_AM/global_vegtype.1x1.grb"}
export FNSOTC=${FNSOTC:-"$FIX_AM/global_soiltype.1x1.grb"}
export FNSMCC=${FNSMCC:-"$FIX_AM/global_soilmcpc.1x1.grb"}
export FNMSKH=${FNMSKH:-"$FIX_AM/seaice_newland.grb"}
export FNTSFA=${FNTSFA:-""}
export FNACNA=${FNACNA:-""}
export FNSNOA=${FNSNOA:-""}
export FNVMNC=${FNVMNC:-"$FIX_AM/global_shdmin.0.144x0.144.grb"}
export FNVMXC=${FNVMXC:-"$FIX_AM/global_shdmax.0.144x0.144.grb"}
export FNSLPC=${FNSLPC:-"$FIX_AM/global_slope.1x1.grb"}
export FNABSC=${FNABSC:-"$FIX_AM/global_snoalb.1x1.grb"}

#------------------------------------------------------------------
# changeable parameters
# dycore definitions
res=`echo $CASE |cut -c2-5`
resp=`expr $res + 1 `
export npx=$resp
export npy=$resp
export npz=`expr $LEVS - 1 `
export io_layout="1,1"
export ncols=$(( (${npx}-1)*(${npy}-1)*3/2 ))

# blocking factor used for threading and general physics performance
export nyblocks=`expr \( $npy - 1 \) \/ $layout_y `
export nxblocks=`expr \( $npx - 1 \) \/ $layout_x \/ 32`
if [ $nxblocks -le 0 ]; then export nxblocks=1 ; fi

# export the pre-conditioning of the solution
# =0 implies no pre-conditioning
# >0 means new adiabatic pre-conditioning
# <0 means older adiabatic pre-conditioning
export na_init=${na_init:-1}
[[ $warm_start = ".true." ]] && export na_init=0

# variables for controlling initialization of NCEP/NGGPS ICs
export filtered_terrain=${filtered_terrain:-".true."}
export ncep_plevels=${ncep_plevels:-".true."}
export gfs_dwinds=${gfs_dwinds:-".true."}

# determines whether FV3 or GFS physics calculate geopotential
export gfs_phil=${gfs_phil:-".false."}

# Dissipative heating
export dspheat=${dspheat:-".false."}

# Shallow convection
export shal_cnv=${shal_cnv:-".false."}

# determine whether ozone production occurs in GFS physics
export ozcalc=${ozcalc:-".true."}

# export various debug options
export no_dycore=${no_dycore:-".false."}
export dycore_only=${adiabatic:-".false."}
export print_freq=${print_freq:-6}

if [ ${TYPE} = "nh" ]; then # non-hydrostatic options

  export hydrostatic=".false."
  export phys_hydrostatic=".false."     # enable heating in hydrostatic balance in non-hydrostatic simulation
  export use_hydro_pressure=".false."   # use hydrostatic pressure for physics
  if [ $warm_start = ".true." ]; then
    export make_nh=".false."              # restarts contain non-hydrostatic state
  else
    export make_nh=".true."               # re-initialize non-hydrostatic state
  fi

else # hydrostatic options

  export hydrostatic=".true."
  export phys_hydrostatic=".false."     # ignored when hydrostatic = T
  export use_hydro_pressure=".false."   # ignored when hydrostatic = T
  export make_nh=".false."              # running in hydrostatic mode

fi

# Conserve total energy as heat globally
export consv_te=${consv_te:-1.} # range 0.-1., 1. will restore energy to orig. val. before physics

# time step parameters in FV3
export k_split=${k_split:-2}
export n_split=${n_split:-6}

if [ `echo ${MONO} | cut -c-4` = "mono" ];  then # monotonic options

  export d_con="0."
  export do_vort_damp=${do_vort_damp:-".false."}
  if [ ${TYPE} = "nh" ]; then # non-hydrostatic
    export hord_mt=" 10"
    export hord_xx="-10"
  else # hydrostatic
    export hord_mt=" 10"
    export hord_xx="-10"
  fi

else # non-monotonic options

  export d_con="1."
  export do_vort_damp=${do_vort_damp:-".true."}
  if [ ${TYPE} = "nh" ]; then # non-hydrostatic
    export hord_mt=" 6"
    export hord_xx="-5"
  else # hydrostatic
    export hord_mt=" 10"
    export hord_xx="-10"
  fi

fi

if [ `echo ${MONO} | cut -c-4` != "mono" -a ${TYPE} = "nh" ]; then
  export vtdm4="0.06"
else
  export vtdm4="0.05"
fi


if [ $warm_start = ".true." ]; then # warm start from restart file

  export nggps_ic=".false."
  export external_ic=".false."
  export mountain=".true."
  if [ $read_increment = ".true." ]; then # add increment on the fly to the restarts
    export res_latlon_dynamics="fv3_increment.nc"
  else
    export res_latlon_dynamics='""'
  fi

else # CHGRES'd GFS analyses

  export nggps_ic=${nggps_ic:-".true."}
  export external_ic=".true."
  export mountain=".false."
  export read_increment=".false."
  export res_latlon_dynamics='""'

fi

# build the date for curr_date and diag_table from CDATE
export y=`echo $CDATE | cut -c1-4`
export m=`echo $CDATE | cut -c5-6`
export d=`echo $CDATE | cut -c7-8`
export h=`echo $CDATE | cut -c9-10`
export curr_date="${y},${m},${d},${h},0,0"
export restart_secs=${restart_secs:-0}

# copy over the tables
export DIAG_TABLE=${DIAG_TABLE:-$PARM_FV3DIAG/diag_table}
export DATA_TABLE=${DATA_TABLE:-$PARM_FV3DIAG/data_table}
export FIELD_TABLE=${FIELD_TABLE:-$PARM_FV3DIAG/field_table}

# build the diag_table with the experiment name and date stamp
cat > diag_table << EOF
FV3 Forecast
$y $m $d $h 0 0
EOF
cat $DIAG_TABLE >> diag_table

$NCP $DATA_TABLE data_table
$NCP $FIELD_TABLE field_table

#------------------------------------------------------------------
cat > input.nml <<EOF
&amip_interp_nml
  interp_oi_sst = .true.
  use_ncep_sst = .true.
  use_ncep_ice = .false.
  no_anom_sst = .false.
  data_set = 'reynolds_oi'
  date_out_of_range = 'climo'
  $amip_interp_nml
/

&atmos_model_nml
  nxblocks = $nxblocks
  nyblocks = $nyblocks
  surface_debug = .false.
  dycore_only = $dycore_only
  $atmos_model_nml
/

&diag_manager_nml
  prepend_date = .true.
  long_date = .true.
  $diag_manager_nml
/

&fms_io_nml
  checksum_required = .false.
  max_files_r = 100
  max_files_w = 100
  $fms_io_nml
/

&fms_nml
  clock_grain = 'ROUTINE'
  domains_stack_size = ${domains_stack_size:-115200}
  print_memory_usage = ${print_memory_usage:-".false."}
  $fms_nml
/

&fv_core_nml
  layout = $layout_x,$layout_y
  io_layout = $io_layout
  npx = $npx
  npy = $npy
  ntiles = $ntiles
  npz = $npz
  grid_type = -1
  make_nh = $make_nh
  fv_debug = ${fv_debug:-".false."}
  range_warn = .false.
  reset_eta = .false.
  n_sponge = ${n_sponge:-8}
  tau = 5.
  rf_cutoff = 8.e2
  d2_bg_k1 = 0.16
  d2_bg_k2 = 0.02
  kord_tm = -11
  kord_mt = 10
  kord_wz = 10
  kord_tr = 11
  hydrostatic = $hydrostatic
  phys_hydrostatic = $phys_hydrostatic
  use_hydro_pressure = $use_hydro_pressure
  beta = 0.
  a_imp = 1.
  p_fac = 0.1
  k_split = $k_split
  n_split = $n_split
  nwat = 2
  na_init = $na_init
  d_ext = 0.
  dnats = 0
  fv_sg_adj = ${fv_sg_adj:-600}
  d2_bg = 0.
  nord = 2
  dddmp = 0.2
  d4_bg = 0.15
  vtdm4 = $vtdm4
  ke_bg = 0.
  do_vort_damp = $do_vort_damp
  external_ic = $external_ic
  res_latlon_dynamics = $res_latlon_dynamics
  read_increment = $read_increment
  gfs_phil = $gfs_phil
  nggps_ic = $nggps_ic
  mountain = $mountain
  ncep_ic = .false.
  d_con = $d_con
  hord_mt = $hord_mt
  hord_vt = $hord_xx
  hord_tm = $hord_xx
  hord_dp = $hord_xx
  hord_tr = -8
  adjust_dry_mass = .false.
  consv_te = $consv_te
  consv_am = .false.
  fill = .true.
  dwind_2d = .false.
  print_freq = $print_freq
  warm_start = $warm_start
  no_dycore = $no_dycore
  z_tracer = .true.
  agrid_vel_rst = ${agrid_vel_rst:-".true."}
  $fv_core_nml
/

&coupler_nml
  months = 0
  days = 0
  hours = $FHMAX
  dt_atmos = $DELTIM
  dt_ocean = $DELTIM
  current_date = $curr_date
  calendar = 'julian'
  memuse_verbose = .false.
  atmos_nthreads = $NTHREADS_FV3
  use_hyper_thread = ${hyperthread:-".false."}
  ncores_per_node = $cores_per_node
  restart_secs = $restart_secs
  $coupler_nml
/

&external_ic_nml
  filtered_terrain = $filtered_terrain
  ncep_plevels = $ncep_plevels
  levp = $LEVS
  gfs_dwinds = $gfs_dwinds
  checker_tr = .false.
  nt_checker = 0
  $external_ic_nml
/

&gfs_physics_nml
  debug = ${gfs_phys_debug:-".false."}
  ntoz = ${ntoz:-3}
  ntcw = ${ntcw:-2}
  fhswr = ${FHSWR:-3600.}
  fhlwr = ${FHLWR:-3600.}
  ozcalc = $ozcalc
  nocnv = ${nocnv:-".false."}
  fhzero = $FHZER
  prslrd0 = 0.
  fhcyc = $FHCYC
  use_ufo = ${use_ufo:-".false."}
  nst_anl = ${nst_anl:-".false."}
  ncols = $ncols
  iems = $IEMS
  isol = $ISOL
  iaer = $IAER
  ico2 = $ICO2
  cdmbgwd = $cdmbgwd
  dspheat = $dspheat
  shal_cnv = $shal_cnv
  $gfs_physics_nml
/

&nggps_diag_nml
  fdiag = ${fdiag:-$FHOUT}
  $nggps_diag_nml
/

&interpolator_nml
  interp_method = 'conserve_great_circle'
  $interpolator_nml
/

&namsfc
  FNGLAC = '$FNGLAC'
  FNMXIC = '$FNMXIC'
  FNTSFC = '$FNTSFC'
  FNSNOC = '$FNSNOC'
  FNZORC = '$FNZORC'
  FNALBC = '$FNALBC'
  FNAISC = '$FNAISC'
  FNTG3C = '$FNTG3C'
  FNVEGC = '$FNVEGC'
  FNVETC = '$FNVETC'
  FNSOTC = '$FNSOTC'
  FNSMCC = '$FNSMCC'
  FNMSKH = '$FNMSKH'
  FNTSFA = '$FNTSFA'
  FNACNA = '$FNACNA'
  FNSNOA = '$FNSNOA'
  FNVMNC = '$FNVMNC'
  FNVMXC = '$FNVMXC'
  FNSLPC = '$FNSLPC'
  FNABSC = '$FNABSC'
  LDEBUG = .false.
  FSMCL(2) = 99999
  FSMCL(3) = 99999
  FSMCL(4) = 99999
  FTSFS = 90
  FAISS = 99999
  FSNOL = 99999
  FSICL = 99999
  FTSFL = 99999
  FAISL = 99999
  FVETL = 99999
  FSOTL = 99999
  FvmnL = 99999
  FvmxL = 99999
  FSLPL = 99999
  FABSL = 99999
  FSNOS = 99999
  FSICS = 99999
  $namsfc_nml
/

&fv_grid_nml
  grid_file = 'INPUT/grid_spec.nc'
  $fv_grid_nml
/
EOF

# Add namelist for stochastic physics options for ensemble member forecast
echo "" >> input.nml
if [ $MEMBER -gt 0 ]; then
  if [ "${SET_STP_SEED:-"NO"}" = "YES" ] ; then
    ISEED_SKEB=$((-1000*CDATE - 10*MEMBER - 1))
    ISEED_SHUM=$((-1000*CDATE - 10*MEMBER - 2))
    ISEED_SPPT=$((-1000*CDATE - 10*MEMBER - 3))
    ISEED_VC=$((-1000*CDATE   - 10*MEMBER - 4))
  fi
  cat >> input.nml << EOF
&nam_stochy
  ntrunc = ${JCAP:-$((`echo $CASE | cut -c 2-`*2-2))}
  lon_s = ${LONB:-$((`echo $CASE | cut -c 2-`*4))}
  lat_s = ${LATB:-$((`echo $CASE | cut -c 2-`*2))}
  skeb = ${SKEB:-"-999."}
  shum = ${SHUM:-"-999."}
  sppt = ${SPPT:-"-999."}
  vcamp = ${VCAMP:-"-999."}
  iseed_skeb = ${ISEED_SKEB:-${ISEED:-"0"}}
  iseed_shum = ${ISEED_SHUM:-${ISEED:-"0"}}
  iseed_sppt = ${ISEED_SPPT:-${ISEED:-"0"}}
  iseed_vc = ${ISEED_VC:-${ISEED:-"0"}}
  skeb_tau = ${SKEB_TAU:-"-999."}
  shum_tau = ${SHUM_TAU:-"-999."}
  sppt_tau = ${SPPT_TAU:-"-999."}
  vc_tau = ${VC_TAU:-"-999."}
  skeb_lscale = ${SKEB_LSCALE:-"-999."}
  shum_lscale = ${SHUM_LSCALE:-"-999."}
  sppt_lscale = ${SPPT_LSCALE:-"-999."}
  vc_lscale = ${VC_LSCALE:-"-999."}
  sppt_logit = ${SPPT_LOGIT:-".true."}
  sppt_sfclimit = ${SPPT_SFCLIMIT:-".true."}
  vc = ${VC:-"0."}
  $nam_stochy_nml
/
EOF
else
  cat >> input.nml << EOF
&nam_stochy
  $nam_stochy_nml
/
EOF
fi

#------------------------------------------------------------------
# run the executable
cd $DATA
$NCP $EXECDIR/$FCSTEXEC $DATA/.
export OMP_NUM_THREADS=$NTHREADS_FV3
$APRUN_FV3 $DATA/$FCSTEXEC 1>&1 2>&2

export ERR=$?
export err=$ERR
$ERRSCRIPT || exit 2

#------------------------------------------------------------------
if [ $SEND = "YES" ]; then
  # Copy model output files
  cd $DATA
  for n in `seq 1 $ntiles`; do
    for file in ${CDATE}0000.*.tile${n}.nc; do
      $NCP $file $memdir/$(echo $(basename $file) | sed -e "s/${CDATE}0000\.//g")
    done
  done

  # Copy model restart files
  cd $DATA/RESTART
  if [ $restart_secs -gt 0 ]; then
    restart_hrs=`echo "$restart_secs / 3600" | bc`
    RDATE=`$NDATE +$restart_hrs $CDATE`
    rymd=`echo $RDATE | cut -c1-8`
    rhh=`echo  $RDATE | cut -c9-10`
    rmemdir=$COMROT/${prefix}.$rymd/$rhh/$memchar
    mkdir -p $rmemdir/RESTART
    if [ $restart_hrs -eq $FHMAX ]; then
      for file in `ls -1` ; do
        $NCP $file $rmemdir/RESTART/${rymd}.${rhh}0000.$file
      done
    else
      for file in `ls -1 ${rymd}.${rhh}0000.*` ; do
        $NCP $file $rmemdir/RESTART/$file
      done
    fi
  else
    mkdir -p $memdir/RESTART
    RDATE=`$NDATE +$FHMAX $CDATE`
    rymd=`echo $RDATE | cut -c1-8`
    rhh=`echo  $RDATE | cut -c9-10`
    for file in `ls -1` ; do
      $NCP $file $memdir/RESTART/${rymd}.${rhh}0000.$file
    done
  fi
fi

#------------------------------------------------------------------
# Clean up before leaving
if [ ${KEEPDATA:-"NO"} = "NO" ]; then rm -rf $DATA; fi

#------------------------------------------------------------------
set +x
if [ "$VERBOSE" = "YES" ] ; then
  echo $(date) EXITING $0 with return code $err >&2
fi
exit $err
