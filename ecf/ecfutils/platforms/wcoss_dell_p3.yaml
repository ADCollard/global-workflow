# This file configures the workflow to run on the cray parts of WCOSS

platform: !Platform
  <<: *global_platform_common

  # Evaluate: this must be "false" to ensure disk space availability logic
  # is not run unless this file is for the current platform.
  Evaluate: false

  # name: the name of this platform; this must match what the underlying
  # scripts expect.
  name: WCOSS_DELL_P3

  # detect: this is a function that returns true iff the user is on GAEA
  # and false otherwise
  detect: !calc |
    tools.isdir("/usrx") and "dell" in tools.readlink("/usrx")

  # public_release_ics: location of input conditions that have been 
  # prepared for the public release.
  public_release_ics: /gpfs/hps3/emc/global/noscrub/emc.glopara/FV3GFS_V1_RELEASE/ICs

  # CHGRP_RSTPROD_COMMAND - this specifies the command to use to
  # restrict access to NOAA "rstprod" data restriction class.
  # This only used for observation processing, data assimilation, and
  # data assimilation archiving, which are not in the public release.
  CHGRP_RSTPROD_COMMAND: "chgrp rstprod"

  # NWPROD - location of the NCEP operational "nwprod" directory, which
  # only has meaning on the NCEP WCOSS machines.  It is used to get
  # the paths to certain programs and scripts.
  NWPROD: "/gpfs/dell1/nco/ops/nwprod"

  # DMPDIR - location of the global dump data.  This is used by the observation
  # processing scripts, which are not included in the public release.
  DMPDIR: !FirstTrue
    - do: "/gpfs/gp1/emc/globaldump"
      when: !calc tools.isdir(do)
    - do: "/gpfs/tp1/emc/globaldump"
      when: !calc tools.isdir(do)
    - otherwise: !error "Cannot find globaldump directory."

  # RTMFIX - location of the CRTM fixed data files used by the GSI data
  # assimilation.  The data assimilation is not included in this public release
  # so this path is unused.
  RTMFIX: "$CRTM_FIX"

  # BASE_SVN - a directory maintained by emc global model developers
  # that contains recent versions of source code and executables for
  # various subversion repositories.  This is used on some platforms
  # to find executables for this workflow.
  BASE_SVN: "/gpfs/dell2/emc/modeling/noscrub/emc.glopara/svn"

  # BASE_GIT - a directory maintained by emc global model developers
  # that contains recent versions of source code and executables for
  # various git repositories. This is used on some platforms to find
  # executables for this workflow.
  BASE_GIT: "/gpfs/dell2/emc/modeling/noscrub/emc.glopara/git"

  # config_base_extras - Additional configuration data to put in the
  # config.base file
  config_base_extras: |
    if [ -d /gpfs/tp1 ]; then
        export SITE="LUNA"
    elif [ -d /gpfs/gp1 ]; then
        export SITE="SURGE"
    fi

  # Additional variables to send to Rocoto XML entities or ecflow edits.
  metasched_more: !expand |
    {metasched.defvar("QUEUE", doc.accounting.exclusive_partition.exclusive_queue)}
    {metasched.defvar("QUEUESHARED", doc.accounting.shared_partition.shared_queue)}
    {metasched.defvar("QUEUESERV", doc.accounting.service_partition.service_queue)}
    {metasched.defvar("CPU_PROJECT", doc.accounting.cpu_project)}

  partitions:
    Evaluate: false
    default_exclusive: !calc doc.platform.partitions.wcoss_cray
    default_service: !calc doc.platform.partitions.wcoss_cray
    default_shared: !calc doc.platform.partitions.wcoss_cray
    wcoss_cray:
      <<: *global_partition_common

      # specification - string to specify to the batch system to
      # request this partition.  Not relevant for WCOSS Cray
      specification: null

      # shared_accounting_ref - accounting settings for shared jobs
      shared_accounting_ref:
        queue: !calc metasched.varref('QUEUESHARED')
        project: !calc metasched.varref('CPU_PROJECT')

      # service_accounting_ref - accounting settings for service jobs (jobs
      # that require tape or network access)
      service_accounting_ref:
        queue: !calc metasched.varref('QUEUESERV')
        project: !calc metasched.varref('CPU_PROJECT')

      # exclusive_accounting_ref - accounting settings for jobs that require
      # exclusive access to a node.
      exclusive_accounting_ref:
        queue: !calc metasched.varref('QUEUE')
        project: !calc metasched.varref('CPU_PROJECT')

      # Queues to use for each job type.  This logic automatically
      # switches between development queues on the backup machine and
      # development queues on the production machine based on whether the
      # /gpfs/hps2/ptmp is writable.
      shared_queue: !FirstTrue
        - when: !calc ( tools.can_write("/gpfs/hps2/ptmp") )
          do: dev_shared
        - otherwise: devonprod_shared
      service_queue: dev_transfer
      exclusive_queue: !FirstTrue
        - when: !calc ( tools.can_write("/gpfs/hps2/ptmp") )
          do: dev
        - otherwise: devonprod

      # Details about the scheduler on this cluster.
      scheduler_settings:
        scheduler_name: LSF
        use_task_geometry: False
        parallelism_name: HydraIMPI
        node_type: generic
        physical_cores_per_node: 24
        logical_cpus_per_core: 2
        hyperthreading_allowed: true
        indent_text: "  "
        memory_per_node: !calc (64*1024)

      scheduler: !calc |
        tools.get_scheduler(scheduler_settings.scheduler_name, scheduler_settings)
      parallelism: !calc |
        tools.get_parallelism(scheduler_settings.parallelism_name, scheduler_settings)
      nodes: !calc |
        tools.node_tool_for(scheduler_settings.node_type, scheduler_settings)

  # Path to mmlsquota, the program used to get GPFS disk usage information:
  mmlsquota: "/usr/lpp/mmfs/bin/mmlsquota"

  # Automatically detect the least used scrub area the user can access:
  least_used_ptmp: !Immediate
    - !FirstMax
      - do: /gpfs/dell3/ptmp
        when: !calc ( int(tools.can_write(do)) * tools.gpfs_gb(do,"dell3-ptmp","gpfs-dell3",mmlsquota) )
        message: Use {do} for long-term temp.
      - do: /gpfs/dell1/ptmp
        when: !calc ( int(tools.can_write(do)) * tools.gpfs_gb(do,"dell1-ptmp","gpfs-dell1",mmlsquota) )
        message: Use {do} for long-term temp.
      - do: /gpfs/dell2/ptmp
        when: !calc ( int(tools.can_write(do)) * tools.gpfs_gb(do,"dell2-ptmp","gpfs-dell2",mmlsquota) )
        message: Use {do} for long-term temp.
  least_used_stmp: !Immediate
    - !FirstMax
      - do: /gpfs/dell1/stmp
        when: !calc ( int(tools.can_write(do)) * tools.gpfs_gb(do,"dell1-stmp","gpfs-dell1",mmlsquota) )
        message: Use {do} for short-term temp.
      - do: /gpfs/dell2/stmp
        when: !calc ( int(tools.can_write(do)) * tools.gpfs_gb(do,"dell2-stmp","gpfs-dell2",mmlsquota) )
        message: Use {do} for short-term temp.
      - do: /gpfs/dell3/stmp
        when: !calc ( int(tools.can_write(do)) * tools.gpfs_gb(do,"dell3-stmp","gpfs-dell3",mmlsquota) )
        message: Use {do} for short-term temp.

  # long_term_temp - area for storage of data that must be passed
  # between jobs or shared with programs external to this workflow.
  long_term_temp: !expand "{least_used_ptmp}/{tools.env('USER')}"

  # short_term_temp - area for data that is only needed within one job:
  short_term_temp: !expand "{least_used_stmp}/{tools.env('USER')}"

  # EXP_PARENT_DIR - Parent directory  of the expdir (experiment directory)
  EXP_PARENT_DIR: !expand "{doc.user_places.PROJECT_DIR}/noscrub/{tools.env('USER')}"
